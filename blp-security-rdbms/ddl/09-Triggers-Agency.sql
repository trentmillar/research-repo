USE BLPDB
GO

CREATE FUNCTION agency.[GetUserClassification]()
RETURNS int
AS
BEGIN
	DECLARE @CLASSIFICATION as INT;
	SELECT @CLASSIFICATION = CLASSIFICATION_ID 
	FROM agency.[USER]
	WHERE [USER_NAME] = USER;
	RETURN @CLASSIFICATION;
END
GO

CREATE FUNCTION agency.[GetCompartmentClassification](@COMPARTMENT_ID as INT)
RETURNS INT
AS
BEGIN
	DECLARE @CLASSIFICATION_ID AS INT;
	SELECT @CLASSIFICATION_ID = ucc.CLASSIFICATION_ID 
	FROM agency.USER_COMPARTMENT_CLASSIFICATION ucc
	JOIN agency.[USER] u ON
		ucc.USER_ID = u.USER_ID
		AND u.USER_NAME = USER
	WHERE ucc.COMPARTMENT_ID = @COMPARTMENT_ID
	
	IF @CLASSIFICATION_ID is null
	BEGIN 
		SET @CLASSIFICATION_ID = 1
	END
	
	RETURN @CLASSIFICATION_ID;
END
GO

GRANT INSERT, UPDATE, DELETE ON [agency].[SECRET] TO BLRole
GO

CREATE TRIGGER agency.OnInsertSecret ON [agency].[SECRET]
WITH ENCRYPTION
INSTEAD OF INSERT
AS
-- DATA TO INSERT
	DECLARE @INFORMANT_ID INT, @SORTIE_ID INT,
		@COMPARTMENT_ID INT, @CLASSIFICATION_ID INT,
		@SECRET_TITLE VARCHAR(100), @SECRET_DESCRIPTION VARCHAR(500),
		@SECRET_DATETIME DATETIME, @SORTIE_CLASSIFICATION_ID INT
	
	SELECT 
		@SORTIE_ID = inserted.SORTIE_ID
		,@INFORMANT_ID = inserted.INFORMANT_ID
		,@CLASSIFICATION_ID = inserted.CLASSIFICATION_ID		
		,@SECRET_TITLE = inserted.SECRET_TITLE
		,@SECRET_DESCRIPTION = inserted.SECRET_DESCRIPTION
		,@SECRET_DATETIME = inserted.SECRET_DATETIME
	FROM inserted	
	
	SELECT 
		@COMPARTMENT_ID = COMPARTMENT_ID,
		@SORTIE_CLASSIFICATION_ID = CLASSIFICATION_ID 
	FROM [agency]._SORTIE 
	WHERE SORTIE_ID = @SORTIE_ID
	
	DECLARE @Error VARCHAR(50)
	
	--Write Up
	IF @SORTIE_CLASSIFICATION_ID > @CLASSIFICATION_ID
	BEGIN
		SET @Error = 'Inserting a secret that is less classified than it''s parent is forbidden';	
		EXEC agency.INSERT_AUDIT_ENTRY @TABLE = 'SECRET', @OPERATION = 'WRITE-FAIL'		
		RAISERROR (50002, 16, 1, @Error);
		ROLLBACK
		RETURN
	END
	
	DECLARE @USERS_COMPARTMENT_CLASSIFICATION_ID INT = agency.[GetCompartmentClassification](@COMPARTMENT_ID);

	IF @USERS_COMPARTMENT_CLASSIFICATION_ID IS NULL OR @USERS_COMPARTMENT_CLASSIFICATION_ID > @CLASSIFICATION_ID
	BEGIN	
		SET @Error = 'User ' + USER + ' is too CLASSIFIED to insert into this COMPARTMENT';	
		EXEC agency.INSERT_AUDIT_ENTRY @TABLE = 'SECRET', @OPERATION = 'WRITE-FAIL'		
		RAISERROR (50002, 16, 1, @Error);
		ROLLBACK
		RETURN
	END
PRINT @COMPARTMENT_ID
	INSERT INTO [agency]._SECRET (INFORMANT_ID, SORTIE_ID, SECRET_DESCRIPTION, SECRET_TITLE, SECRET_DATETIME, COMPARTMENT_ID, CLASSIFICATION_ID)
	VALUES (@INFORMANT_ID, @SORTIE_ID, @SECRET_TITLE, @SECRET_DESCRIPTION, @SECRET_DATETIME, @COMPARTMENT_ID, @CLASSIFICATION_ID)
	
	EXEC agency.INSERT_AUDIT_ENTRY @TABLE = 'SECRET', @OPERATION = 'WRITE-PASS'
GO

CREATE TRIGGER agency.OnUpdateSecret
   ON [agency].[_SECRET]
   AFTER UPDATE
AS 
	DECLARE @SORTIE_ID INT, @COMPARTMENT_ID INT, @CLASSIFICATION_ID INT,
		@SORTIE_COMPARTMENT_ID INT, @SORTIE_CLASSIFICATION_ID INT
	
	SELECT 
		@SORTIE_ID = inserted.SORTIE_ID
		,@COMPARTMENT_ID = inserted.COMPARTMENT_ID
		,@CLASSIFICATION_ID = inserted.CLASSIFICATION_ID
	FROM inserted
	
	SELECT
		@SORTIE_COMPARTMENT_ID = COMPARTMENT_ID
		,@SORTIE_CLASSIFICATION_ID = CLASSIFICATION_ID
	FROM agency._SORTIE
	WHERE 
		SORTIE_ID = @SORTIE_ID
	
	IF @SORTIE_COMPARTMENT_ID <> @COMPARTMENT_ID OR @SORTIE_CLASSIFICATION_ID < @CLASSIFICATION_ID
	BEGIN
		DECLARE @Error VARCHAR(50) = 'SORTIE security can not supercede SECRET';	
		EXEC agency.INSERT_AUDIT_ENTRY @TABLE = 'SECRET', @OPERATION = 'UPDATE-FAIL'		
		RAISERROR (50002, 16, 1, @Error)
		ROLLBACK
		RETURN	
	END		
GO